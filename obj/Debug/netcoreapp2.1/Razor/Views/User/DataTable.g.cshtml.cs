#pragma checksum "/Users/edward/dotnet-new-templates/CustomMVC/Views/User/DataTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "74e80accf6bc0a2a07b6a55ea1953a7472421981"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_User_DataTable), @"mvc.1.0.view", @"/Views/User/DataTable.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/User/DataTable.cshtml", typeof(AspNetCore.Views_User_DataTable))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/edward/dotnet-new-templates/CustomMVC/Views/_ViewImports.cshtml"
using CustomMVC;

#line default
#line hidden
#line 2 "/Users/edward/dotnet-new-templates/CustomMVC/Views/_ViewImports.cshtml"
using CustomMVC.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"74e80accf6bc0a2a07b6a55ea1953a7472421981", @"/Views/User/DataTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e09209c59c7253e5398bafa12f86f077243a3c3c", @"/Views/_ViewImports.cshtml")]
    public class Views_User_DataTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 4455, true);
            WriteLiteral(@"<div class=""row justify-content-center mt-1"">
    <div class=""col-8"">
        <table class=""table"">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th");
            WriteLiteral(@">
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
          ");
            WriteLiteral(@"          <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
       ");
            WriteLiteral(@"         </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
                <tr>
                    <th scope=""row"">&#64;user.UserId</th>
                    <td>&#64;user.FirstName &#64;user.LastName</td>
                    <td>&#64;user.Email</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class=""col-4"">
        <div class=""card"">
            <div class=""header pt-3 blue-gradient"">
                <div class=""row d-flex justify-content-center"">
                    <h5 class=""white-text mb-3 pt-3 font-weight-bold"">Table Help</h5>
                </div>
            </div>
            <div class=""card-body"">
                <p class=""mb-md-0 mb-5 lead"">
                    This table is not bound to the user folder. It can be used as a view for any controller the only requirement is changing &#64;model to ");
            WriteLiteral(@"whatever data is being passed into the template. Then with a foreach you can loop through the data and display them in the table. This is represented by the &#64; followed by user attributes above. Add actions if applicable. Check out the MD Bootstrap website on styling for the table.
                </p>
            </div>
        </div>
    </div>
</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
